#include "заголовок.h"
int a = 5;
int b = 5;
/*----------------------------------------------------------------*/
/*             Р Е А Л И З А Ц И Я    М Е Т О Д О В               */
/*----------------------------------------------------------------*/

/*----------------------------------------*/
/*     МЕТОДЫ КЛАССА МЕСТОПОЛОЖЕНИЕ       */
/*----------------------------------------*/
//конструктор
Местоположение::Местоположение(int InitX, int InitY)
{
	//инициализация закрытых переменных своего класса
	X = InitX;
	Y = InitY;
};//end Location::Location()

  //деструктор
Местоположение::~Местоположение(void)  //формально пустое тело
{
};//end Location::~Location()

  //получить X координату точки
int Местоположение::GetX(void)
{
	return X;
};//end Location::GetX()	

  //получить Y координату точки
int Местоположение::GetY(void)
{
	return Y;
}; //end Location::GetY()


/*----------------------------------------*/
/*        МЕТОДЫ КЛАССА Точка             */
/*----------------------------------------*/
//конструктор
//для инициализации закрытых полей используем конструктор предка
Точка::Точка(int InitX, int InitY, Texture& Точка) : Местоположение(InitX, InitY)
{
	//инициализация закрытых переменных своего класса
	Видна = false;
	точка.setTexture(Точка);
	точка.setTextureRect(IntRect(0, 0, a, b));
	t = Точка;
}//end Point::Point()

 //--------------------------------------------------------------
 //деструктор
Точка::~Точка(void)   //формально пустое тело
{
}//end Point::~Point()

 //--------------------------------------------------------------
 //показать ТОЧКУ
void Точка::Отобразить(RenderWindow& window)
{
	точка.setPosition(X, Y);
	if(Видна)
	window.draw(точка);
}//end Point::Show()

//--------------------------------------------------------------
 //показать ТОЧКУ
void Точка::Show(void)
{
	Видна = true;
}//end Point::Show()

 //--------------------------------------------------------------
 //скрыть ТОЧКУ
void Точка::Hide(void)
{
	Видна = false;
}//end Point::Hide()

 //--------------------------------------------------------------
 //узнать про светимость ТОЧКИ
bool Точка::IsVisible(void)
{
	return Видна;
};//end Point::IsVisible()

//--------------------------------------------------------------
//переместить ТОЧКУ
void Точка::Переместить(int NewX, int NewY)
{
	X = NewX;	//поменять координаты ТОЧКИ
	Y = NewY;
};//end Point::MoveTo()

  //-------------------------------------------------------------------
void Точка::Упровление(int Step)    //буксировка фигуры
{
	int FigX, FigY;   //новые координаты фигуры

	FigX = GetX();    //получаем начальное положение фигуры
	FigY = GetY();

	if ((Keyboard::isKeyPressed(Keyboard::A)) || (Keyboard::isKeyPressed(Keyboard::Left)))
		FigX = FigX - Step;
	if ((Keyboard::isKeyPressed(Keyboard::D)) || (Keyboard::isKeyPressed(Keyboard::Right)))
		FigX = FigX + Step;
	if ((Keyboard::isKeyPressed(Keyboard::W)))
		FigY = FigY - Step;
	if ((Keyboard::isKeyPressed(Keyboard::S)))
		FigY = FigY + Step;
	Переместить(FigX, FigY);

}//end Drag()

/*----------------------------------------*/
/*      МЕТОДЫ КЛАССА ПРЯМАУГОЛЬНИК       */
/*----------------------------------------*/
//конструктор
//для инициализации закрытых полей используем конструктор предка
ПРЯМАУГОЛЬНИК::ПРЯМАУГОЛЬНИК(int InitX, int InitY, Texture& Точка, int а, int б) : Точка(InitX, InitY, Точка)
{
	//инициализация закрытых переменных своего класса
	
	длинна = б;
	ширина = а;
}

//--------------------------------------------------------------
 //деструктор
ПРЯМАУГОЛЬНИК::~ПРЯМАУГОЛЬНИК(void)   //формально пустое тело
{
}

//-------------------------------------------------------------------
void ПРЯМАУГОЛЬНИК::Set (int InitX, int InitY, Texture& Точка, int а, int б) {
	Видна = false;
	точка.setTexture(Точка);
	точка.setTextureRect(IntRect(0, 0, a, b));
	X = InitX;
	Y = InitY;
	длинна = б;
	ширина = а;
}

//-------------------------------------------------------------------
void ПРЯМАУГОЛЬНИК::Отобразить(RenderWindow& window) {
	Y -= ширина;
	X -= длинна;
	for (int i = 0; i < длинна * 2; i++)
	{
		Точка::Отобразить(window);
		X += 1;
	}

	for (int i = 0; i < ширина * 2; i++)
	{
		Точка::Отобразить(window);
		Y += 1;
	}

	for (int i = 0; i < длинна * 2; i++)
	{
		Точка::Отобразить(window);
		X -= 1;
	}

	for (int i = 0; i < ширина * 2; i++)
	{
		Точка::Отобразить(window);
		Y -= 1;
	}

	Y += ширина;
	X += длинна;
}

/*----------------------------------------*/
/*        МЕТОДЫ КЛАССА САМАЛЁТ           */
/*----------------------------------------*/
//конструктор
//для инициализации закрытых полей используем конструктор предка
САМАЛЁТ::САМАЛЁТ(int InitX, int InitY, Texture & Точка, int а) :  ПРЯМАУГОЛЬНИК(InitX, InitY, Точка, а, 1) {
	корпус.Set(InitX, InitY, Точка, 0.1 * а, а);
	крыло.Set(InitX + 0.6 * а, InitY, Точка, 0.6 * а, 0.1 * а);
	хвост.Set(InitX - 0.7 * а, InitY, Точка, 0.3 * а, 0.1 * а);
}

//--------------------------------------------------------------
 //деструктор
САМАЛЁТ::~САМАЛЁТ(void)   //формально пустое тело
{
}

void САМАЛЁТ::Отобразить(RenderWindow& window, int Step) {
	корпус.Отобразить(window);
	крыло.Отобразить(window);
	хвост.Отобразить(window);
	корпус.Упровление(Step);
	крыло.Упровление(Step);
	хвост.Упровление(Step);
}
//void САМАЛЁТ::Упровление(int Step) {
//	ПРЯМАУГОЛЬНИК::Упровление(Step);
//	корпус.Упровление(Step);
//	крыло.Упровление(Step);
//	хвост.Упровление(Step);
//}
void САМАЛЁТ::Show() {
	корпус.Show();
	крыло.Show();
	хвост.Show();
}
void САМАЛЁТ::Hide() {
	корпус.Hide();
	крыло.Hide();
	хвост.Hide();
}
void САМАЛЁТ::Переместить(int NewX, int NewY) {
	ПРЯМАУГОЛЬНИК::Переместить(NewX, NewY);
	корпус.Переместить(NewX, NewY);
	крыло.Переместить(NewX + 0.6 * ширина, NewY);
	хвост.Переместить(NewX - 0.7 * ширина, NewY);
}
void САМАЛЁТ::ИзменитьРазмер(int а) {
	ширина = а;
	корпус.Set(X, Y, t, 0.1 * а, а);
	крыло.Set(X + 0.6 * а, Y, t, 0.6 * а, 0.1 * а);
	хвост.Set(X - 0.7 * а, Y, t, 0.3 * а, 0.1 * а);
	Show();
}